//Macro- Tracking dancing Cell and Angle detection over Time
//2020-05-20 Erwan Grandgirard
//Jerome Mutterer and Bertrand Vernay for Help 

print("\\Clear");
run("Select None");

//to find the XY reference

Dir=getDirectory("");
title= getTitle();
id=getImageID();
//use the pixel unit
run("Properties...", "unit=pixel pixel_width=1 pixel_height=1 voxel_depth=1 ");
run("Duplicate...", "title=[XY middle] duplicate");
run("Z Project...", "projection=[Max Intensity]");
run("Median...", "radius=9");
//run("Threshold...");
setAutoThreshold("Yen dark");
setOption("BlackBackground", true);
run("Convert to Mask");
run("Analyze Particles...", "size=20-Infinity circularity=0.01-1.00 exclude add");
roiManager("Measure");
X0=getResult("XM");
Y0=getResult("YM");
print(X0);
print(Y0);
close();
roiManager("reset");
run("Clear Results");
selectWindow("XY middle");
close();

//to track the cell
selectWindow(title);
run("Duplicate...", "title=[XY] duplicate");
mask=getTitle();
run("Median...", "radius=9 stack");
run("Gaussian Blur...", "sigma=4 stack");
setAutoThreshold("Default dark");
setOption("BlackBackground", true);
run("Convert to Mask", "method=Default background=Dark calculate black");
run("Watershed", "stack");
waitForUser("adjust watershed with brush tool");
run("Make Binary", "method=Default background=Dark calculate black");
run("Analyze Particles...", "size=20-Infinity circularity=0.01-1.00 exclude add stack");



n=roiManager("count");
for (i = 0; i < n; i++) {
	roiManager('select', i);
	roiManager("measure");
}

run("Select None");
Table.set("cell",0,0);
Table.set("cell",1,1);
Table.update;
colors=newArray("red","blue");

for(i=2; i<nResults-1; i=i+2) {
	
	OrigX=getResult("XM", i);
	OrigY=getResult("YM", i);
	X1=getResult("XM", i-1);
    Y1=getResult("YM", i-1);
    X2=getResult("XM", i-2);
    Y2=getResult("YM", i-2);
	L1X=abs(OrigX-X1);
	L1Y=abs(OrigY-Y1);
	L2X=abs(OrigX-X2);
	L2Y=abs(OrigY-Y2);
    L1=sqrt((L1X*L1X)+(L1Y*L1Y));
    L2=sqrt((L2X*L2X)+(L2Y*L2Y));
    
   if (L1<L2){
    Table.set("cell",i,getResult("cell",i-1));

   } else{
 	 Table.set("cell",i,getResult("cell",i-2));
  	}
    
	OrigX=getResult("XM", i+1);
	OrigY=getResult("YM", i+1);
	X1=getResult("XM", i-1);
    Y1=getResult("YM", i-1);
    X2=getResult("XM", i-2);
    Y2=getResult("YM", i-2);
	L1X=abs(OrigX-X1);
	L1Y=abs(OrigY-Y1);
	L2X=abs(OrigX-X2);
	L2Y=abs(OrigY-Y2);
    L1=sqrt((L1X*L1X)+(L1Y*L1Y));
    L2=sqrt((L2X*L2X)+(L2Y*L2Y));
    
   if (L1<L2){
    Table.set("cell",i+1,getResult("cell",i-1));

    } else{
 	 Table.set("cell",i+1,getResult("cell",i-2));
  	}

Table.update;
}

for (i = 0; i < roiManager("count"); i++) {
	roiManager("select",i);
    Roi.setFillColor(colors[Table.get("cell",i)]);
    roiManager("update");
    run("Select None");
}
saveAs("Tiff", Dir + mask);


Table.create("Cell0");
Table.create("Cell1");
selectWindow("Results");

// compteur pour chaque nouvelle table, initialisés à 0
counterCell0 = 0;
counterCell1 = 0;
for(i=0; i<nResults; i++) {
	val=getResult("cell", i);
	//print(val);
	XM=getResult("XM",i);
	YM=getResult("YM", i);
	if (val==0){
		selectWindow("Cell0");
		Table.set("row", counterCell0, i);		
		Table.set("cell", counterCell0, val);
		Table.set("XM", counterCell0, XM);
		Table.set("YM", counterCell0, YM);
		//compteur table Cell0
		counterCell0++;
		
	} else {
		selectWindow("Cell1");
		Table.set("row", counterCell1, i);
		Table.set("cell", counterCell1, val);
		Table.set("XM", counterCell1, XM);
		Table.set("YM", counterCell1, YM);
		//compteur table Cell1
		counterCell1++;
	}
	Table.update;
}
Table.rename("Cell1", "Results");


//mesure des angles
selectWindow("Results");
MeasureAngles();
saveAs("Measurements", Dir + title + "Cell1" +"Results.csv");
roiManager("save selected", Dir+title+"Cell1.zip");
run("Clear Results");
Table.rename("Cell0", "Results");
selectWindow("Results");
roiManager("reset");
roiManager("Set Color", "green");
roiManager("Set Line Width", 1);

MeasureAngles();
roiManager("save selected", Dir+title+"Cell0.zip");
saveAs("Measurements", Dir + title + "Cell0" +"Results.csv");
run("Clear Results");


function MeasureAngles(){
	for(i=0 ; i<nResults-1; i++) {
		X1=getResult("XM",i);
		Y1=getResult("YM", i);
		X2=getResult("XM",i+1);
		Y2=getResult("YM", i+1);
		makeSelection("angle", newArray(X1,X0,X2), newArray(Y1,Y0,Y2));
		angle=getValue("Angle");
		Table.set("Angle T-T+1",i,angle);
		selectWindow("XY.tif");
		Stack.setFrame(i+1);
		makeLine(X1, Y1, X0, Y0, X2, Y2);
		roiManager("add");
		roiManager("select", 0);
		roiManager("update");
	}
}
